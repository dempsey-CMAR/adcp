[{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://dempsey-cmar.github.io/adcp/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://dempsey-cmar.github.io/adcp/articles/cut_function.html","id":"cut-function","dir":"Articles","previous_headings":"","what":"cut() function","title":"Exploring Base R's cut() function","text":"First, let’s look help file cut: cut divides range x intervals codes values x according interval fall. leftmost interval corresponds level one, next leftmost level two . numeric vector converted factor cutting. either numeric vector two unique cut points single number (greater equal 2) giving number intervals x cut. labels levels resulting category. default, labels constructed using “(,b]” interval notation. labels = FALSE, simple integer codes returned instead factor. logical, indicating ‘x[]’ equal lowest (highest, right = FALSE) ‘breaks’ value included. logical, indicating intervals closed right (open left) vice versa. integer used labels given. determines number digits used formatting break numbers. logical: result ordered factor? arguments passed methods. breaks specified single number, range data divided breaks pieces equal length, outer limits moved away 0.1% range ensure extreme values fall within break intervals. (x constant vector, equal-length intervals created, one includes single value.) labels parameter specified, values used name factor levels. none specified, factor level labels constructed “(b1, b2]”, “(b2, b3]” etc. right = TRUE “[b1, b2)”, … right = FALSE. case, dig.lab indicates minimum number digits used formatting numbers b1, b2, …. larger value (12) used needed distinguish pair endpoints: fails labels “Range3” used. Formatting done formatC. default method sort numeric vector breaks, methods required labels correspond intervals sorting. R 3.2.0, getOption(“OutDec”) consulted labels constructed labels = NULL. factor returned, unless labels = FALSE results integer vector level codes. Values fall outside range breaks coded NA, NaN NA values. Instead table(cut(x, br)), hist(x, br, plot = FALSE) efficient less memory hungry. Instead cut(*, labels = FALSE), findInterval() efficient. Becker, R. ., Chambers, J. M. Wilks, . R. (1988) New S Language. Wadsworth & Brooks/Cole. split splitting variable according group factor; factor, tabulate, table, findInterval. quantile ways choosing breaks roughly equal content (rather length). .bincode bare-bones version.","code":"cut(x, ...)  ## Default S3 method: cut(x, breaks, labels = NULL,     include.lowest = FALSE, right = TRUE, dig.lab = 3,     ordered_result = FALSE, ...) Z <- stats::rnorm(10000) table(cut(Z, breaks = -6:6)) sum(table(cut(Z, breaks = -6:6, labels = FALSE))) sum(graphics::hist(Z, breaks = -6:6, plot = FALSE)$counts)  cut(rep(1,5), 4) #-- dummy tx0 <- c(9, 4, 6, 5, 3, 10, 5, 3, 5) x <- rep(0:8, tx0) stopifnot(table(x) == tx0)  table( cut(x, breaks = 8)) table( cut(x, breaks = 3*(-2:5))) table( cut(x, breaks = 3*(-2:5), right = FALSE))  ##--- some values OUTSIDE the breaks : table(cx  <- cut(x, breaks = 2*(0:4))) table(cxl <- cut(x, breaks = 2*(0:4), right = FALSE)) which(is.na(cx));  x[is.na(cx)]  #-- the first 9  values  0 which(is.na(cxl)); x[is.na(cxl)] #-- the last  5  values  8   ## Label construction: y <- stats::rnorm(100) table(cut(y, breaks = pi/3*(-3:3))) table(cut(y, breaks = pi/3*(-3:3), dig.lab = 4))  table(cut(y, breaks =  1*(-3:3), dig.lab = 4)) # extra digits don't \"harm\" here table(cut(y, breaks =  1*(-3:3), right = FALSE)) #- the same, since no exact INT!  ## sometimes the default dig.lab is not enough to be avoid confusion: aaa <- c(1,2,3,4,5,2,3,4,5,6,7) cut(aaa, 3) cut(aaa, 3, dig.lab = 4, ordered_result = TRUE)  ## one way to extract the breakpoints labs <- levels(cut(aaa, 3)) cbind(lower = as.numeric( sub(\"\\\\((.+),.*\", \"\\\\1\", labs) ),       upper = as.numeric( sub(\"[^,]*,([^]]*)\\\\]\", \"\\\\1\", labs) ))"},{"path":"https://dempsey-cmar.github.io/adcp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Danielle Dempsey. Maintainer.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dempsey D (2024). adcp: Format Visualize ADCP data. R package version 2.0.0, https://dempsey-cmar.github.io/adcp/.","code":"@Manual{,   title = {adcp: Format and Visualize ADCP data},   author = {Danielle Dempsey},   year = {2024},   note = {R package version 2.0.0},   url = {https://dempsey-cmar.github.io/adcp/}, }"},{"path":"https://dempsey-cmar.github.io/adcp/index.html","id":"adcp-readme","dir":"","previous_headings":"","what":"Format and Visualize ADCP data","title":"Format and Visualize ADCP data","text":"Format visualize Current data collect Acoustic Current Doppler Profilers (ADCPs).","code":""},{"path":"https://dempsey-cmar.github.io/adcp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Format and Visualize ADCP data","text":"can install development version adcp GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"dempsey-CMAR/adcp\")"},{"path":"https://dempsey-cmar.github.io/adcp/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Format and Visualize ADCP data","text":"Centre Marine Applied Research (CMAR) coordinates extensive Coastal Monitoring Program measure Essential Ocean Variables around coast Nova Scotia, Canada. three main branches program: Water Quality, Currents, Waves. Processed data branch can viewed downloaded several sources, outlined CMAR Report & Data Access Cheat Sheet (download clickable links). adcp package used format visualize data Current branch Coastal Monitoring Program. Current data collected Acoustic Doppler Current Profilers (ADCPs) deployed seafloor. ADCP hydroacoustic current meter measures water velocities range depths. sensors measure soundwaves scattered back moving particles water column use Doppler effect estimate speed direction (Figure 1).  Figure 1: ADCP diagram (scale).  Current data recorded vertical bins throughout water column. adcp package uses data sensor configuration calculate bin height sea floor bin depth surface (Figure 2). Note bin height always refers point space; bin depth can refer different points due changing tides.  Figure 2: bin height sea floor bin depth surface calculated deployment configurations including sensor depth, sensor height sea floor, first bin range, bin size.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Format and Visualize ADCP data","text":"Consider ADCP deployed January 17, 2019 March 1, 2019 Long Beach, St. Mary’s Bay. raw .txt file looks like :  Figure 3: Raw ADCP data file Long Beach.","code":"library(adcp) library(dplyr) library(viridis)"},{"path":"https://dempsey-cmar.github.io/adcp/index.html","id":"import-and-format-data","dir":"","previous_headings":"Example","what":"Import and format data","title":"Format and Visualize ADCP data","text":"adcp_read_txt reads .txt file applies formatting. column timestamp, ensemble number, variable measured. Additional columns, labelled V8 Vn hold measurements bin. adcp_assign_bin_altitude() re-names bin columns corresponding bin altitude (height sea floor), using information deployment configuration. centre first bin 1.5 m sea floor; centre second bin 2.5 m sea floor, etc. adcp_correct_timestamp() converts timestamp UTC. timestamp column raw data timezone deployment date (e.g., “AST” deployed November March “DST” deployed March November). timestamp account changes daylight savings time. adcp_correct_timestamp() converts timestamp true UTC adding 3 hours deployment date daylight savings, 4 hours deployment date Atlantic Standard Time. ADCP deployed January (AST), 4 hours added timestmap convert UTC. adcp_pivot_longer() pivots data bin heights observations, adds Climate Forecast-compliant names column. dat now useful format analysis. However, submission Nova Scotia Open Data Portal, several additional steps required. adcp_calculate_bin_depth() adds column bin_depth_below_surface_m: adcp_add_opendata_cols() adds deployment_id, waterbody, station columns data can compiled deployments. adcp_flag_data() flags obervations sensor_depth_below_surface_m changes faster expected. steps can linked using pipe operator:","code":"path <- system.file(\"testdata\", package = \"adcp\")  # deployment metadata from tracking sheet metadata <- tibble(   Depl_ID = \"DG009\",   Waterbody = \"St. Mary's Bay\",   Station_Name = \"Long Beach\",   Inst_Altitude = 0.5,   Bin_Size = 1,   First_Bin_Range = 1 )   dat <- adcp_read_txt(path, \"2019-01-17_Long_Beach.txt\")  head(dat) #>          timestamp_ns Num       variable   V8 V9 V10 V11 V12 V13 V14 V15 V16 #> 1 2019-01-17 10:40:00  17    SensorDepth 0.16 NA  NA  NA  NA  NA  NA  NA  NA #> 2 2019-01-17 10:40:00  17     WaterSpeed   NA NA  NA  NA  NA  NA  NA  NA  NA #> 3 2019-01-17 10:40:00  17 WaterDirection   NA NA  NA  NA  NA  NA  NA  NA  NA #> 4 2019-01-17 10:50:00  18    SensorDepth 0.16 NA  NA  NA  NA  NA  NA  NA  NA #> 5 2019-01-17 10:50:00  18     WaterSpeed   NA NA  NA  NA  NA  NA  NA  NA  NA #> 6 2019-01-17 10:50:00  18 WaterDirection   NA NA  NA  NA  NA  NA  NA  NA  NA #>   V17 V18 V19 V20 V21 V22 V23 V24 V25 V26 V27 V28 V29 V30 V31 V32 V33 V34 V35 #> 1  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 2  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 3  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 4  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 5  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 6  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #>   V36 V37 V38 V39 V40 V41 V42 V43 V44 V45 V46 V47 V48 V49 V50 V51 V52 V53 V54 #> 1  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 2  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 3  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 4  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 5  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 6  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #>   V55 V56 V57 V58 V59 V60 V61 V62 V63 V64 V65 V66 #> 1  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 2  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 3  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 4  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 5  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA #> 6  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA dat <- adcp_assign_altitude(dat, metadata = metadata)  head(dat[, 1:10]) #>          timestamp_ns Num       variable  1.5 2.5 3.5 4.5 5.5 6.5 7.5 #> 1 2019-01-17 10:40:00  17    SensorDepth 0.16  NA  NA  NA  NA  NA  NA #> 2 2019-01-17 10:40:00  17     WaterSpeed   NA  NA  NA  NA  NA  NA  NA #> 3 2019-01-17 10:40:00  17 WaterDirection   NA  NA  NA  NA  NA  NA  NA #> 4 2019-01-17 10:50:00  18    SensorDepth 0.16  NA  NA  NA  NA  NA  NA #> 5 2019-01-17 10:50:00  18     WaterSpeed   NA  NA  NA  NA  NA  NA  NA #> 6 2019-01-17 10:50:00  18 WaterDirection   NA  NA  NA  NA  NA  NA  NA dat <- adcp_correct_timestamp(dat)  head(dat[1:10]) #>         timestamp_utc Num       variable  1.5 2.5 3.5 4.5 5.5 6.5 7.5 #> 1 2019-01-17 14:40:00  17    SensorDepth 0.16  NA  NA  NA  NA  NA  NA #> 2 2019-01-17 14:40:00  17     WaterSpeed   NA  NA  NA  NA  NA  NA  NA #> 3 2019-01-17 14:40:00  17 WaterDirection   NA  NA  NA  NA  NA  NA  NA #> 4 2019-01-17 14:50:00  18    SensorDepth 0.16  NA  NA  NA  NA  NA  NA #> 5 2019-01-17 14:50:00  18     WaterSpeed   NA  NA  NA  NA  NA  NA  NA #> 6 2019-01-17 14:50:00  18 WaterDirection   NA  NA  NA  NA  NA  NA  NA dat <- adcp_pivot_longer(dat)  head(dat) #> # A tibble: 6 × 5 #>   timestamp_utc       sensor_depth_below_surface_m bin_height_…¹ sea_w…² sea_w…³ #>   <dttm>                                     <dbl>         <dbl>   <dbl>   <dbl> #> 1 2019-01-17 15:10:00                         26.8           1.5   0.074    209. #> 2 2019-01-17 15:10:00                         26.8           2.5   0.087    208. #> 3 2019-01-17 15:10:00                         26.8           3.5   0.103    211. #> 4 2019-01-17 15:10:00                         26.8           4.5   0.124    224. #> 5 2019-01-17 15:10:00                         26.8           5.5   0.138    221. #> 6 2019-01-17 15:10:00                         26.8           6.5   0.171    220. #> # … with abbreviated variable names ¹​bin_height_above_sea_floor_m, #> #   ²​sea_water_speed_m_s, ³​sea_water_to_direction_degree dat <- adcp_calculate_bin_depth(dat, metadata = metadata)  head(dat) #> # A tibble: 6 × 6 #>   timestamp_utc       sensor_depth_below_surfa…¹ bin_d…² bin_h…³ sea_w…⁴ sea_w…⁵ #>   <dttm>                                   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #> 1 2019-01-17 15:10:00                       26.8    25.8     1.5   0.074    209. #> 2 2019-01-17 15:10:00                       26.8    24.8     2.5   0.087    208. #> 3 2019-01-17 15:10:00                       26.8    23.8     3.5   0.103    211. #> 4 2019-01-17 15:10:00                       26.8    22.8     4.5   0.124    224. #> 5 2019-01-17 15:10:00                       26.8    21.8     5.5   0.138    221. #> 6 2019-01-17 15:10:00                       26.8    20.8     6.5   0.171    220. #> # … with abbreviated variable names ¹​sensor_depth_below_surface_m, #> #   ²​bin_depth_below_surface_m, ³​bin_height_above_sea_floor_m, #> #   ⁴​sea_water_speed_m_s, ⁵​sea_water_to_direction_degree dat <- adcp_add_opendata_cols(dat, metadata = metadata)  head(dat) #> # A tibble: 6 × 9 #>   deployme…¹ water…² station timestamp_utc       senso…³ bin_d…⁴ bin_h…⁵ sea_w…⁶ #>   <chr>      <chr>   <chr>   <dttm>                <dbl>   <dbl>   <dbl>   <dbl> #> 1 DG009      St. Ma… Long B… 2019-01-17 15:10:00    26.8    25.8     1.5   0.074 #> 2 DG009      St. Ma… Long B… 2019-01-17 15:10:00    26.8    24.8     2.5   0.087 #> 3 DG009      St. Ma… Long B… 2019-01-17 15:10:00    26.8    23.8     3.5   0.103 #> 4 DG009      St. Ma… Long B… 2019-01-17 15:10:00    26.8    22.8     4.5   0.124 #> 5 DG009      St. Ma… Long B… 2019-01-17 15:10:00    26.8    21.8     5.5   0.138 #> 6 DG009      St. Ma… Long B… 2019-01-17 15:10:00    26.8    20.8     6.5   0.171 #> # … with 1 more variable: sea_water_to_direction_degree <dbl>, and abbreviated #> #   variable names ¹​deployment_id, ²​waterbody, ³​sensor_depth_below_surface_m, #> #   ⁴​bin_depth_below_surface_m, ⁵​bin_height_above_sea_floor_m, #> #   ⁶​sea_water_speed_m_s dat <- adcp_flag_data(dat)  head(dat[, 6:11]) #> # A tibble: 6 × 6 #>   bin_depth_below_surface_m bin_height_above_s…¹ sea_w…² sea_w…³ depth…⁴ depth…⁵ #>                       <dbl>                <dbl>   <dbl>   <dbl>   <dbl> <glue>  #> 1                      25.8                  1.5   0.074    209.    1.55 sensor… #> 2                      24.8                  2.5   0.087    208.    1.55 sensor… #> 3                      23.8                  3.5   0.103    211.    1.55 sensor… #> 4                      22.8                  4.5   0.124    224.    1.55 sensor… #> 5                      21.8                  5.5   0.138    221.    1.55 sensor… #> 6                      20.8                  6.5   0.171    220.    1.55 sensor… #> # … with abbreviated variable names ¹​bin_height_above_sea_floor_m, #> #   ²​sea_water_speed_m_s, ³​sea_water_to_direction_degree, ⁴​depth_diff, #> #   ⁵​depth_flag dat <- adcp_read_txt(path, \"2019-01-17_Long_Beach.txt\") %>%    adcp_assign_altitude(metadata) %>%   adcp_correct_timestamp() %>%   adcp_pivot_longer() %>%   adcp_calculate_bin_depth(metadata) %>%   adcp_add_opendata_cols(metadata) %>%   adcp_flag_data()  head(dat) #> # A tibble: 6 × 11 #>   deployme…¹ water…² station timestamp_utc       senso…³ bin_d…⁴ bin_h…⁵ sea_w…⁶ #>   <chr>      <chr>   <chr>   <dttm>                <dbl>   <dbl>   <dbl>   <dbl> #> 1 DG009      St. Ma… Long B… 2019-01-17 15:10:00    26.8    25.8     1.5   0.074 #> 2 DG009      St. Ma… Long B… 2019-01-17 15:10:00    26.8    24.8     2.5   0.087 #> 3 DG009      St. Ma… Long B… 2019-01-17 15:10:00    26.8    23.8     3.5   0.103 #> 4 DG009      St. Ma… Long B… 2019-01-17 15:10:00    26.8    22.8     4.5   0.124 #> 5 DG009      St. Ma… Long B… 2019-01-17 15:10:00    26.8    21.8     5.5   0.138 #> 6 DG009      St. Ma… Long B… 2019-01-17 15:10:00    26.8    20.8     6.5   0.171 #> # … with 3 more variables: sea_water_to_direction_degree <dbl>, #> #   depth_diff <dbl>, depth_flag <glue>, and abbreviated variable names #> #   ¹​deployment_id, ²​waterbody, ³​sensor_depth_below_surface_m, #> #   ⁴​bin_depth_below_surface_m, ⁵​bin_height_above_sea_floor_m, #> #   ⁶​sea_water_speed_m_s"},{"path":"https://dempsey-cmar.github.io/adcp/index.html","id":"plot-data","dir":"","previous_headings":"Example","what":"Plot data","title":"Format and Visualize ADCP data","text":"Plot sensor depth determine observations trimmed.  Filter data keep “good” obsevations. Plot sensor depth:  Plot current rose:  Plot current speed histogram.","code":"adcp_plot_depth_flags(dat) dat <- filter(dat, depth_flag == \"good\") adcp_plot_depth(dat, geom = \"line\") cols <- viridis(12, option = \"F\", direction = -1)  ints <- adcp_count_obs(dat, sea_water_speed_m_s) #> Lower bound of first interval set to 0 breaks <- c(ints$lower, max(ints$upper))    adcp_plot_current_rose(   dat,    breaks = breaks,    speed_cols = cols,   speed_label = \"Current Speed (m/s)\" ) adcp_plot_speed_hist(ints, bar_cols = cols, speed_label = \"Current Speed (m/s)\")"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_add_opendata_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Add deployment_id, waterbody, and station columns — adcp_add_opendata_cols","title":"Add deployment_id, waterbody, and station columns — adcp_add_opendata_cols","text":"Add deployment_id, waterbody, station columns","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_add_opendata_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add deployment_id, waterbody, and station columns — adcp_add_opendata_cols","text":"","code":"adcp_add_opendata_cols(   dat,   metadata = NULL,   deployment_id = NULL,   waterbody = NULL,   station = NULL )"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_add_opendata_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add deployment_id, waterbody, and station columns — adcp_add_opendata_cols","text":"dat Data frame ACDP data long format, returned adcp_pivot_longer(). metadata Data frame metadata information deployment dat (e.g., row NSDFA tracking sheet). Must include columns Depl_ID, Waterbody, Station. Option use default value metadata = NULL provide required values remaining arguments. deployment_id Unique ID assigned deployment. used metadata argument specified. waterbody Waterbody ADCP deployed. used metadata argument specified. station Specific area ADCP deployed. used metadata argument specified.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_add_opendata_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add deployment_id, waterbody, and station columns — adcp_add_opendata_cols","text":"Returns dat columns deployment_id, waterbody,   station.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_assign_altitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign altitude (height above sea floor) to each bin — adcp_assign_altitude","title":"Assign altitude (height above sea floor) to each bin — adcp_assign_altitude","text":"Assign altitude (height sea floor) bin","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_assign_altitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign altitude (height above sea floor) to each bin — adcp_assign_altitude","text":"","code":"adcp_assign_altitude(   dat_wide,   metadata = NULL,   inst_alt = NULL,   bin_size = NULL,   first_bin_range = NULL )"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_assign_altitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign altitude (height above sea floor) to each bin — adcp_assign_altitude","text":"dat_wide Data frame ADCP data, exported adcp_read_txt(). metadata Data frame metadata information deployment dat_wide (e.g., row NSDFA tracking sheet). Must include columns Inst_Altitude, Bin_Size, First_Bin_Range. Option use default value metadata = NULL provide required values remaining arguments. inst_alt Height sensor sea floor (metres). used metadata argument specified. bin_size Size bin (metres). used metadata argument specified. first_bin_range Distance transducer face centre first bin (metres). used metadata argument specified.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_assign_altitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign altitude (height above sea floor) to each bin — adcp_assign_altitude","text":"Returns dat_wide, bin columns re-named corresponding   altitude (metres).","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_assign_altitude.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign altitude (height above sea floor) to each bin — adcp_assign_altitude","text":"height centre bins calculated : first bin altitude = inst altitude + first bin range second bin altitude = first bin altitude + bin size third bin altitude = second bin altitude + bin size .","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_calculate_bin_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the bin depth below the surface — adcp_calculate_bin_depth","title":"Calculate the bin depth below the surface — adcp_calculate_bin_depth","text":"Calculate bin depth surface","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_calculate_bin_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the bin depth below the surface — adcp_calculate_bin_depth","text":"","code":"adcp_calculate_bin_depth(dat, metadata = NULL, inst_alt = NULL)"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_calculate_bin_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the bin depth below the surface — adcp_calculate_bin_depth","text":"dat Data frame ACDP data long format, returned adcp_pivot_longer(). metadata Data frame metadata information deployment dat (e.g., row NSDFA tracking sheet). Must include column Inst_Altitude. Option use default value metadata = NULL provide required value inst_alt argument. inst_alt Height instrument sea floor (metres). used metadata argument specified.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_calculate_bin_depth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the bin depth below the surface — adcp_calculate_bin_depth","text":"Bin depth surface calculated : bin_depth_below_surface_m = sensor_depth_below_surface_m + inst_alt -   bin_height_above_sea_floor_m warning printed bin_depth_below_surface_m negative.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_check_duplicate_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for duplicate timestamp values — adcp_check_duplicate_timestamp","title":"Check for duplicate timestamp values — adcp_check_duplicate_timestamp","text":"Check duplicate timestamp values","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_check_duplicate_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for duplicate timestamp values — adcp_check_duplicate_timestamp","text":"","code":"adcp_check_duplicate_timestamp(dat_wide)"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_check_duplicate_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for duplicate timestamp values — adcp_check_duplicate_timestamp","text":"dat_wide Data frame ADCP data, returned adcp_read_txt().","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_check_duplicate_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for duplicate timestamp values — adcp_check_duplicate_timestamp","text":"duplicate timestamps detected, returns warning   TRUE. Otherwise returns FALSE.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_convert_flag_to_ordered_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert depth_flag column to ordered factor — adcp_convert_flag_to_ordered_factor","title":"Convert depth_flag column to ordered factor — adcp_convert_flag_to_ordered_factor","text":"Convert depth_flag column ordered factor","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_convert_flag_to_ordered_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert depth_flag column to ordered factor — adcp_convert_flag_to_ordered_factor","text":"","code":"adcp_convert_flag_to_ordered_factor(dat)"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_convert_flag_to_ordered_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert depth_flag column to ordered factor — adcp_convert_flag_to_ordered_factor","text":"dat Data frame ACDP data long format, returned adcp_flag_data().","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_convert_flag_to_ordered_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert depth_flag column to ordered factor — adcp_convert_flag_to_ordered_factor","text":"Returns dat, depth_flag column ordered   factor, levels \"good\" < \"SENSOR_DEPTH_BELOW_SURFACE changed >   x m\" < \"manual flag\".","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_correct_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert timestamp to UTC from AST or DST — adcp_correct_timestamp","title":"Convert timestamp to UTC from AST or DST — adcp_correct_timestamp","text":"Convert timestamp UTC AST DST","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_correct_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert timestamp to UTC from AST or DST — adcp_correct_timestamp","text":"","code":"adcp_correct_timestamp(dat, rm = TRUE)"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_correct_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert timestamp to UTC from AST or DST — adcp_correct_timestamp","text":"dat Data frame least one column timestamp_ns (long wide format). rm Logical argument. TRUE original timestamp_ns column removed.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_correct_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert timestamp to UTC from AST or DST — adcp_correct_timestamp","text":"Returns dat timestamp_utc true UTC.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_correct_timestamp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert timestamp to UTC from AST or DST — adcp_correct_timestamp","text":"raw ADCP data, timestamp column timezone   deployment date (e.g., \"AST\" deployed November March \"DST\"   deployed March November). timestamp account   changes daylight savings time. adcp_read_text() assigns timestamp timezone \"UTC\" avoid   NA values beginning daylight savings time (e.g.,   2019-03-10 02:30:00 valid time \"America/Halifax\"   timezone). adcp_correct_timestamp() converts timestamp true UTC   adding 3 hours deployment date daylight savings, 4   hours deployment date Atlantic Standard Time. earliest timestamp used define original timezone (AST/DST).","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_count_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Count number and proportion of observations in equal intervals — adcp_count_obs","title":"Count number and proportion of observations in equal intervals — adcp_count_obs","text":"Count number proportion observations equal intervals","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_count_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count number and proportion of observations in equal intervals — adcp_count_obs","text":"","code":"adcp_count_obs(   dat,   column = sea_water_speed_cm_s,   n_ints = 12,   n_digits = 4,   label_sep = \"\\n\",   lowest = FALSE )"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_count_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count number and proportion of observations in equal intervals — adcp_count_obs","text":"dat Data frame including column observations assigned intervals. interval size determined range observations n_ints. column Column dat assigned intervals frequency table (QUOTED). n_ints Number intervals divide observations . interval size determined range observations n_ints. Alternatively, vector two unique break points. Passed breaks argument cut(). n_digits Number digits show interval labels. Note additional digits may used actual break values. See vignettes detail. Passed dig.lab argument cut(). label_sep Separator interval labels (\"lower upper\"). Default new line save room plot axis. lowest Logical. TRUE, first interval left ** right inclusive. Passed include.lowest argument cut().","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_count_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count number and proportion of observations in equal intervals — adcp_count_obs","text":"Returns data frame lower upper interval limits (right   inclusive), frequency proportion observations interval.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_count_obs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count number and proportion of observations in equal intervals — adcp_count_obs","text":"Assigns intervals column using cut() function.   Argument right = TRUE match intervals assigned   openair::windRose() function (called   adcp_plot_current_rose()). means intervals right-inclusive,   .e., value 4 assigned interval (1,4]. NOTE: openair::windRose() function cut()   argument include.lower hard-coded FALSE. causes   issue intervals extracted adcp_count_obs()   passed adcp_plot_current_rose() (passes arguments   openair::windRose()). Assume first interval form (x1, x2], minimum value   observations xmin. means round(x1, digits = n_digits) equals xmin, values   xmin assigned interval. case, xmin falls outside   first interval (left exclusive). avoid ,   n_digits large enough ensure round(x1, digits = n_digits) <   xmin. also solved include.lower set   TRUE openair::windRose(). NOTE: submitted Pull Request Open Air. think merged.   update include.lower call , need think   .","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_export_deployment_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Current Data Deployment Information Dataset — adcp_export_deployment_info","title":"Export Current Data Deployment Information Dataset — adcp_export_deployment_info","text":"Imports NSDFA Tracking sheet Deployment ID tracker   exports metadata Nova Scotia Open Data Portal. User must   connected CMAR shared drive.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_export_deployment_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Current Data Deployment Information Dataset — adcp_export_deployment_info","text":"","code":"adcp_export_deployment_info(deployments, path_nsdfa, path_export)"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_export_deployment_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Current Data Deployment Information Dataset — adcp_export_deployment_info","text":"deployments Vector deployment IDs include dataset. path_nsdfa Full file path nsdfa tracking sheet, including file name extension. path_export File path folder Deployment Information Dataset exported.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_export_deployment_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Current Data Deployment Information Dataset — adcp_export_deployment_info","text":"Exports csv file named todays-date_Current_Data_Deployment_Info.csv.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_extract_deployment_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract deployment date and station name from file path — adcp_extract_deployment_info","title":"Extract deployment date and station name from file path — adcp_extract_deployment_info","text":"Extract deployment date station name file path","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_extract_deployment_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract deployment date and station name from file path — adcp_extract_deployment_info","text":"","code":"adcp_extract_deployment_info(file_path)"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_extract_deployment_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract deployment date and station name from file path — adcp_extract_deployment_info","text":"file_path Path file, include file name extension (.csv .txt). File name must include deployment date station name, format YYYY-MM-DD_Station Name.ext (e.g., 2007-12-18_Spectacle Island.txt)","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_extract_deployment_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract deployment date and station name from file path — adcp_extract_deployment_info","text":"Returns tibble three columns: DEPLOYMENT,   Depl_Date, Station_Name.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_flag_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag ensembles with suspect sensor_depth_below_surface_m recordings — adcp_flag_data","title":"Flag ensembles with suspect sensor_depth_below_surface_m recordings — adcp_flag_data","text":"Flag ensembles suspect sensor_depth_below_surface_m recordings","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_flag_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag ensembles with suspect sensor_depth_below_surface_m recordings — adcp_flag_data","text":"","code":"adcp_flag_data(dat, depth_flag_threshold = 1)"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_flag_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag ensembles with suspect sensor_depth_below_surface_m recordings — adcp_flag_data","text":"dat Dataframe ACDP data long format, returned adcp_pivot_longer(). depth_flag_threshold change sensor_depth_below_surface_m trigger flag (metres).","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_flag_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag ensembles with suspect sensor_depth_below_surface_m recordings — adcp_flag_data","text":"Returns dat two extra columns inspection:   depth_diff = lead(sensor_depth_below_surface_m) -   sensor_depth_below_surface_m depth_flag.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_format_report_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats tables for summary report — adcp_format_report_table","title":"Formats tables for summary report — adcp_format_report_table","text":"Formats tables summary report","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_format_report_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats tables for summary report — adcp_format_report_table","text":"","code":"adcp_format_report_table(report_table, transpose = TRUE)"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_format_report_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formats tables for summary report — adcp_format_report_table","text":"report_table Table include summary report. Either deployment metadata NSDFA tracking sheet (returned adcp_write_report_table(), document history) . transpose Logical argument indicating whether transpose report_table applying format. Use default TRUE deployment table. Set FALSE document history table.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_format_report_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats tables for summary report — adcp_format_report_table","text":"Returns flextable object render nicely Word   report. table two columns: first column (bold) column   names report_table; second column corresponding   entries report_table.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_import_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Import current data from rds files. — adcp_import_data","title":"Import current data from rds files. — adcp_import_data","text":"Import current data rds files.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_import_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import current data from rds files. — adcp_import_data","text":"","code":"adcp_import_data(path_input = NULL, county = \"all\", add_county_col = TRUE)"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_import_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import current data from rds files. — adcp_import_data","text":"path_input Path rds files imported. Default currents/processed_data/assembled_data folder CMAR Operations shared drive (user must connected Perennia VPN). county Vector character string(s) indicating county counties import data. filter applied file path, county name MUST part file path (e.g., name folder). Defaults counties. add_county_col Logical argument indicating whether include \"county\" column output. TRUE, imported data must \"waterbody\" \"station\" columns.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_pivot_longer.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot ADCP data from bin height as column names to bin height as observations — adcp_pivot_longer","title":"Pivot ADCP data from bin height as column names to bin height as observations — adcp_pivot_longer","text":"Pivot ADCP data bin height column names bin height observations","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_pivot_longer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot ADCP data from bin height as column names to bin height as observations — adcp_pivot_longer","text":"","code":"adcp_pivot_longer(dat_wide, rm_NA = TRUE)"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_pivot_longer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot ADCP data from bin height as column names to bin height as observations — adcp_pivot_longer","text":"dat_wide Data frame ADCP data, returned adcp_read_txt() adcp_assign_alt(). rm_NA Logical argument. rm_NA = TRUE, rows sea_water_speed_m_s NA sea_water_to_direction_degree NA removed.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_pivot_longer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot ADCP data from bin height as column names to bin height as observations — adcp_pivot_longer","text":"Returns data long format. dat_wide adcp_read_txt() (.e., bin altitude   assigned), following columns returned: timestamp_utc,   sensor_depth_below_surface_m (SensorDepth), bin_id (default column   names imported using read_adcp_txt; starts V8), sea_water_speed_m_s   (WaterSpeed), sea_water_to_direction_degree (WaterDirection). dat_wide adcp_assign_altitude(),   following columns returned: timestamp_utc, sensor_depth_below_surface_m   (SensorDepth), bin_depth_below_surface_m, bin_height_above_sea_floor_m,   sea_water_speed_m_s (WaterSpeed), sea_water_to_direction_degree   (WaterDirection).","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_current_rose.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate current rose — adcp_plot_current_rose","title":"Generate current rose — adcp_plot_current_rose","text":"Generate current rose","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_current_rose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate current rose — adcp_plot_current_rose","text":"","code":"adcp_plot_current_rose(   dat,   breaks,   speed_cols = NULL,   speed_label = \"Current Speed (cm/s)\" )"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_current_rose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate current rose — adcp_plot_current_rose","text":"dat Data frame column names include strings \"speed\" \"direction\". breaks Number break points current speed vector breaks. Lower-inclusive. speed_cols Vector colours. Must length breaks. speed_label Title current speed legend. Default \"Current Speed (cm/s)\".","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_current_rose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate current rose — adcp_plot_current_rose","text":"Returns \"openair\" object, rose plot current speed   direction.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_current_rose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate current rose — adcp_plot_current_rose","text":"Generates current rose using windRose() function   openair package. See help files openair::windRose   detail.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_current_speed_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot histogram of speed observations — adcp_plot_current_speed_time","title":"Plot histogram of speed observations — adcp_plot_current_speed_time","text":"Plot histogram speed observations","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_current_speed_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot histogram of speed observations — adcp_plot_current_speed_time","text":"","code":"adcp_plot_current_speed_time(dat)"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_current_speed_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot histogram of speed observations — adcp_plot_current_speed_time","text":"dat Data frame includes columns station, bin_height_above_sea_floor_m, sea_water_speed_cm_s timestamp_utc.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_current_speed_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot histogram of speed observations — adcp_plot_current_speed_time","text":"Returns ggplot object.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sensor_depth_below_surface_m — adcp_plot_depth","title":"Plot sensor_depth_below_surface_m — adcp_plot_depth","text":"Plot sensor_depth_below_surface_m","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sensor_depth_below_surface_m — adcp_plot_depth","text":"","code":"adcp_plot_depth(dat, title = NULL, date_format = \"%Y-%b-%d\", geom = \"point\")"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sensor_depth_below_surface_m — adcp_plot_depth","text":"dat Data frame ACDP data long format, returned adcp_format_opendata(). title Optional title figure. date_format Format date labels. Default \"%Y-%b-%d\". geom Geom plot. Options \"point\" \"line\".","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot sensor_depth_below_surface_m — adcp_plot_depth","text":"ggplot object. Figure shows sensor_depth_below_surface_m time.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_depth_flags.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sensor_depth_below_surface_m coloured by depth_flag — adcp_plot_depth_flags","title":"Plot sensor_depth_below_surface_m coloured by depth_flag — adcp_plot_depth_flags","text":"Plot sensor_depth_below_surface_m coloured depth_flag","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_depth_flags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sensor_depth_below_surface_m coloured by depth_flag — adcp_plot_depth_flags","text":"","code":"adcp_plot_depth_flags(dat, title = NULL, date_format = \"%Y-%b-%d\")"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_depth_flags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sensor_depth_below_surface_m coloured by depth_flag — adcp_plot_depth_flags","text":"dat Data frame ACDP data long format, including depth_flag column, exported adcp_flag_data(). title Optional title figure. date_format Format date labels. Default \"%Y-%b-%d\".","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_depth_flags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot sensor_depth_below_surface_m coloured by depth_flag — adcp_plot_depth_flags","text":"ggplot object. Figure shows sensor_depth_below_surface_m time,   coloured depth_flag column.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_speed_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot histogram of speed observations — adcp_plot_speed_hist","title":"Plot histogram of speed observations — adcp_plot_speed_hist","text":"Plot histogram speed observations","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_speed_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot histogram of speed observations — adcp_plot_speed_hist","text":"","code":"adcp_plot_speed_hist(   dat_hist,   bar_cols,   text_size = 3,   speed_label = \"Current Speed (cm/s)\" )"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_speed_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot histogram of speed observations — adcp_plot_speed_hist","text":"dat_hist Data frame includes columns bins_plot (text), prop, freq. bar_cols Vector colours. Must length number bins plot. text_size Size text annotating number observations bin. speed_label Title current speed legend. Default \"Current Speed (cm/s)\".","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_plot_speed_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot histogram of speed observations — adcp_plot_speed_hist","text":"Returns ggplot object.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_read_nsdfa_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Import NSDFA tracking sheet and extra deployment metadata — adcp_read_nsdfa_metadata","title":"Import NSDFA tracking sheet and extra deployment metadata — adcp_read_nsdfa_metadata","text":"Import NSDFA tracking sheet extra deployment metadata","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_read_nsdfa_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import NSDFA tracking sheet and extra deployment metadata — adcp_read_nsdfa_metadata","text":"","code":"adcp_read_nsdfa_metadata(   path,   sheet = NULL,   station = NULL,   deployment_date = NULL )"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_read_nsdfa_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import NSDFA tracking sheet and extra deployment metadata — adcp_read_nsdfa_metadata","text":"path Path NSDFA tracking sheet (include file name extension). sheet Sheet read . Defaults first sheet. station Station return metadata. deployment_date Date deployment return metadata.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_read_nsdfa_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import NSDFA tracking sheet and extra deployment metadata — adcp_read_nsdfa_metadata","text":"Returns data frame NSDFA tracking sheet ADCP metadata. Option   filter single deployment.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_read_nsdfa_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import NSDFA tracking sheet and extra deployment metadata — adcp_read_nsdfa_metadata","text":"Reads NSDFA tracking sheet corrects known errors (e.g.,   standardizes station waterbody spellings, fixes deployment dates,   etc.).","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_read_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read ADCP txt file — adcp_read_txt","title":"Read ADCP txt file — adcp_read_txt","text":"Read raw ADCP txt file R format. Label row   appropriate variable name (.e., \"SensorDepth\", \"WaterSpeed\",   \"WaterDirection\").","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_read_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read ADCP txt file — adcp_read_txt","text":"","code":"adcp_read_txt(path, file_name = NULL, rm_dups = TRUE)"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_read_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read ADCP txt file — adcp_read_txt","text":"path Path txt file (including \".txt\" extension) folder txt file saved. file_name Required path include file name. Include \".txt\" file extension. Default file_name = NULL. rm_dups Logical argument indicating whether remove duplicate rows. Default TRUE. (Note: Num column removed checking duplicate rows.)","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_read_txt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read ADCP txt file — adcp_read_txt","text":"Returns data frame data single header row   row labelled \"SensorDepth\", \"WaterSpeed\", \"WaterDirection\".","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_read_txt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read ADCP txt file — adcp_read_txt","text":"timestamp_ns column timezone deployment   date (e.g., \"AST\" deployed November March \"DST\" deployed   March November). timestamp_ns account changes   daylight savings time. , timestamp_ns assigned timezone   \"UTC\" avoid NA values beginning daylight savings   time (e.g., 2019-03-10 02:30:00 valid time   \"America/Halifax\" timezone). timestamp_ns can converted   true UTC using adcp_correct_timestamp(). warning printed duplicate timestamp_ns detected.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_set_up_folders.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up folder structure for processing ADCP data — adcp_set_up_folders","title":"Set up folder structure for processing ADCP data — adcp_set_up_folders","text":"Set folder structure processing ADCP data","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_set_up_folders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up folder structure for processing ADCP data — adcp_set_up_folders","text":"","code":"adcp_set_up_folders(path = NULL, folder = NULL)"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_set_up_folders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up folder structure for processing ADCP data — adcp_set_up_folders","text":"path Path folder created. Default \"Side Lobe Trimmed\" folder Perennia shared drive. folder Name top-level folder created. Default todays_date_Process.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_set_up_folders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up folder structure for processing ADCP data — adcp_set_up_folders","text":"Returns folder structure works well CMAR ADCP processing   templates.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_write_report_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes deployment table for summary report — adcp_write_report_table","title":"Writes deployment table for summary report — adcp_write_report_table","text":"Writes deployment table summary report","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_write_report_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes deployment table for summary report — adcp_write_report_table","text":"","code":"adcp_write_report_table(metadata)"},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_write_report_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes deployment table for summary report — adcp_write_report_table","text":"metadata Deployment metadata NSDFA tracking sheet.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/adcp_write_report_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Writes deployment table for summary report — adcp_write_report_table","text":"Returns tibble three columns: DEPLOYMENT,   Depl_Date, Station_Name.","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/find_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Index of first bin column — find_index","title":"Index of first bin column — find_index","text":"Index first bin column","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/find_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index of first bin column — find_index","text":"","code":"find_index(dat_wide)"},{"path":"https://dempsey-cmar.github.io/adcp/reference/find_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index of first bin column — find_index","text":"dat_wide Data frame ADCP data, exported adcp_read_txt().","code":""},{"path":"https://dempsey-cmar.github.io/adcp/reference/find_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index of first bin column — find_index","text":"Returns index first column bin data.","code":""}]
